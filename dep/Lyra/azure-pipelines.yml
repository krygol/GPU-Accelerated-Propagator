# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Rene Rivera 2019.

trigger:
  branches:
    include:
    - develop
    - master
    - feature/*
pr:
  branches:
    include:
    - develop

stages:

- stage: Test
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 9 Warn-All:
          TOOLSET: gcc
          CXX: g++-9
          PACKAGES: g++-9
          CXXSTD: 11,14,17,2a
          B2_ARGS: warnings=all warnings-as-errors=on
          VM_IMAGE: 'ubuntu-18.04'
        Clang 9 Warn-All:
          TOOLSET: clang
          CXX: clang++-9
          PACKAGES: clang-9
          LLVM_REPO: llvm-toolchain-xenial-9
          CXXSTD: 11,14,17,2a
          B2_ARGS: warnings=all warnings-as-errors=on
          VM_IMAGE: 'ubuntu-18.04'
        GCC 9:
          TOOLSET: gcc
          CXX: g++-9
          PACKAGES: g++-9
          CXXSTD: 11,14,17,2a
          VM_IMAGE: 'ubuntu-18.04'
        GCC 8:
          TOOLSET: gcc
          CXX: g++-8
          PACKAGES: g++-8
          CXXSTD: 11,14,17,2a
          VM_IMAGE: 'ubuntu-18.04'
        GCC 7:
          TOOLSET: gcc
          CXX: g++-7
          PACKAGES: g++-7
          CXXSTD: 11,14,17
          VM_IMAGE: 'ubuntu-18.04'
        GCC 6:
          TOOLSET: gcc
          CXX: g++-6
          PACKAGES: g++-6
          CXXSTD: 11,14,17
          VM_IMAGE: 'ubuntu-18.04'
        GCC 5:
          TOOLSET: gcc
          CXX: g++-5
          PACKAGES: g++-5
          CXXSTD: 11,14
          VM_IMAGE: 'ubuntu-18.04'
        GCC 4.9:
          TOOLSET: gcc
          CXX: g++-4.9
          PACKAGES: g++-4.9
          CXXSTD: 11
          VM_IMAGE: 'ubuntu-16.04'
        GCC 4.8:
          TOOLSET: gcc
          CXX: g++-4.8
          PACKAGES: g++-4.8
          CXXSTD: 11
          VM_IMAGE: 'ubuntu-16.04'
        Clang 9:
          TOOLSET: clang
          CXX: clang++-9
          PACKAGES: clang-9
          LLVM_REPO: llvm-toolchain-xenial-9
          CXXSTD: 11,14,17,2a
          VM_IMAGE: 'ubuntu-18.04'
        Clang 8:
          TOOLSET: clang
          CXX: clang++-8
          PACKAGES: clang-8
          LLVM_REPO: llvm-toolchain-xenial-8
          CXXSTD: 11,14,17,2a
          VM_IMAGE: 'ubuntu-18.04'
        Clang 7:
          TOOLSET: clang
          CXX: clang++-7
          PACKAGES: clang-7
          LLVM_REPO: llvm-toolchain-xenial-7
          CXXSTD: 11,14,17,2a
          VM_IMAGE: 'ubuntu-18.04'
        Clang 6:
          TOOLSET: clang
          CXX: clang++-6.0
          PACKAGES: clang-6.0
          LLVM_REPO: llvm-toolchain-xenial-6.0
          CXXSTD: 11,14,17,2a
          VM_IMAGE: 'ubuntu-18.04'
        Clang 5:
          TOOLSET: clang
          CXX: clang++-5.0
          PACKAGES: clang-5.0
          LLVM_REPO: llvm-toolchain-xenial-5.0
          CXXSTD: 11,14,17
          VM_IMAGE: 'ubuntu-18.04'
        Clang 4:
          TOOLSET: clang
          CXX: clang++-4.0
          PACKAGES: clang-4.0
          LLVM_REPO: llvm-toolchain-xenial-4.0
          CXXSTD: 11,14
          VM_IMAGE: 'ubuntu-18.04'
        Clang 3.9:
          TOOLSET: clang
          CXX: clang++-3.9
          PACKAGES: clang-3.9
          CXXSTD: 11
          VM_IMAGE: 'ubuntu-18.04'
        Clang 3.8:
          TOOLSET: clang
          CXX: clang++-3.8
          PACKAGES: clang-3.8
          CXXSTD: 11
          VM_IMAGE: 'ubuntu-16.04'
        Clang 3.7:
          TOOLSET: clang
          CXX: clang++-3.7
          PACKAGES: clang-3.7
          CXXSTD: 11
          VM_IMAGE: 'ubuntu-16.04'
        Clang 3.6:
          TOOLSET: clang
          CXX: clang++-3.6
          PACKAGES: clang-3.6
          CXXSTD: 11
          VM_IMAGE: 'ubuntu-16.04'
        Clang 3.5:
          TOOLSET: clang
          CXX: clang++-3.5
          PACKAGES: clang-3.5
          CXXSTD: 11
          VM_IMAGE: 'ubuntu-16.04'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
        if test -n "${LLVM_REPO}" ; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo -E apt-add-repository "deb http://apt.llvm.org/xenial/ ${LLVM_REPO} main"
        fi
        sudo -E apt-get update
        sudo -E apt-get -yq --no-install-suggests --no-install-recommends install ${PACKAGES}
      displayName: Install Toolset
    - bash: |
        set -e
        pushd ..
        wget "https://github.com/boostorg/build/archive/develop.zip" -O b2.zip
        unzip b2.zip
        cd build-develop
        CXX= ./bootstrap.sh
        CXX= sudo ./b2 install
        popd
        CXX_PATH=`which ${CXX}`
        echo "using ${TOOLSET} : : ${CXX_PATH} ;" > ${HOME}/user-config.jam
      displayName: Install B2
    - bash: |
        set -e
        pushd tests
        b2 toolset=${TOOLSET} cxxstd=${CXXSTD} ${B2_ARGS} -j2
        popd
      displayName: Test

  - job: 'macOS'
    strategy:
      matrix:
        Xcode 11.2.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_11.2.1.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 11.2:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_11.2.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 11.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_11.1.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 11.0:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_11.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 10.3:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.3.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 10.2.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.2.1.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 10.2:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.2.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 10.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.1.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 10.0:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.app
          VM_IMAGE: 'macOS-10.14'
          CXXSTD: 11,14,17,2a
        Xcode 9.4.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.4.1.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 9.4:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.4.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 9.3.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.3.1.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 9.3:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.3.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 9.2:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.2.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 9.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.1.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 9.0.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.0.1.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 9.0:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11,14
        Xcode 8.3.3:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_8.3.3.app
          VM_IMAGE: 'macOS-10.13'
          CXXSTD: 11
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        sudo xcode-select -switch ${XCODE_APP}
        which clang++
      displayName: Install Toolset
    - bash: |
        set -e
        pushd ..
        wget "https://github.com/boostorg/build/archive/develop.zip" -O b2.zip
        unzip b2.zip
        cd build-develop
        CXX= ./bootstrap.sh
        CXX= sudo ./b2 install
        popd
        CXX_PATH=`which ${CXX}`
        echo "using ${TOOLSET} : : ${CXX_PATH} ;" > ${HOME}/user-config.jam
      displayName: Install B2
    - bash: |
        set -e
        pushd tests
        b2 toolset=${TOOLSET} cxxstd=${CXXSTD} -j2
        popd
      displayName: Test

  - job: 'Windows'
    strategy:
      matrix:
        VS 2019:
          TOOLSET: msvc
          TOOLSET_VERSION: 14.2
          VM_IMAGE: 'windows-2019'
        VS 2017:
          TOOLSET: msvc
          TOOLSET_VERSION: 14.1
          VM_IMAGE: 'vs2017-win2016'
        VS 2015:
          TOOLSET: msvc
          TOOLSET_VERSION: 14.0
          VM_IMAGE: 'vs2015-win2012r2'
        # VS 2013:
        #   TOOLSET: msvc
        #   TOOLSET_VERSION: 12.0
        #   VM_IMAGE: 'vs2015-win2012r2'
        MinGW 8.1.0:
          TOOLSET: gcc
          VM_IMAGE: 'vs2017-win2016'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        cd %BUILD_SOURCESDIRECTORY%/..
        curl "https://github.com/boostorg/build/archive/develop.zip" -L -o b2.zip
      displayName: Download B2
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: $(Build.SourcesDirectory)/../b2.zip
        destinationFolder: $(Build.SourcesDirectory)/..
        cleanDestinationFolder: false
      displayName: Extract B2
    - script: |
        echo using %TOOLSET% ^: %TOOLSET_VERSION% ^; > %HOMEDRIVE%%HOMEPATH%/user-config.jam
        cd %BUILD_SOURCESDIRECTORY%/../build-develop
        cmd.exe /c bootstrap.bat
        b2.exe install
      displayName: Install B2
    - script: |
        set BOOST_BUILD_PATH=%BUILD_SOURCESDIRECTORY%/../build-develop
        cd %BUILD_SOURCESDIRECTORY%/tests
        %BUILD_SOURCESDIRECTORY%/../build-develop/b2.exe --debug-configuration toolset=%TOOLSET% -j2
      displayName: Test
